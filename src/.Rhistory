a <- 5
a
b <- 3
c <- a+b
a
source('~/.active-rstudio-document')
a <- 6
source("http://bioconductor.org/biocLite.R")
biocLite()
c <- a+b
require(stats)
plot(cars)
lines(lowess(cars))
plot(sin, -pi, 2*pi) # see ?plot.function
## Discrete Distribution Plot:
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
source("http://bioconductor.org/biocLite.R")
biocLite("cummeRbund")
source("http://bioconductor.org/biocLite.R")
biocLite("qpgraph")
library(Biobase)
library(qpgraph)
data(EcoliOxygen)
View(filtered.regulon6.1)
View(gds680.eset)
View(subset.filtered.regulon6.1)
View(subset.gds680.eset)
dim(gds680.eset)
nrr <- qpNrr(gds680.eset, q=3, clusterSize=8)
nrr <- qpNrr(gds680.eset, q=3)
library(snow)
install.packages("snow")
install.package("rlecuyer")
install.packages("rlecuyer")
nrr <- qpNrr(gds680.eset, q=3, clusterSize=4)
library(snow)
library(rlecuyer)
nrr <- qpNrr(gds680.eset, q=3, clusterSize=4)
install.packages("Rmpi")
library(Rmpi)
nrr <- qpNrr(gds680.eset, q=3, clusterSize=4)
library(Rmpi)
install.packages("Rmpi")
library(Rmpi)
library("Rmpi", lib.loc="C:/Program Files/R/R-3.0.3/library")
nrr <- qpNrr(gds680.eset, q=3, clusterSize=4)
library(Biobase)
library(qpgraph)
library(snow)
library(rlecuyer)
library(Rmpi)
library("Rmpi", lib.loc="C:/Program Files/R/R-3.0.3/library")
install.packages('C:/Program Files/R/R-3.0.3/library/Rmpi/libs/x64/Rmpi.dll', repos = NULL, type="source")
install.packages('C:/Program Files/R/R-3.0.3/library/Rmpi/', repos = NULL, type="source")
install.packages("Rmpi")
library(Rmpi)
install.packages(pkgs='C:/Users/User/AppData/Local/Temp/RtmpCsBbeg/downloaded_packages/Rmpi_0.6-3.2.zip',
lib='C:/Program Files/R/R-3.0.3/library/Rmpi/' repos = NULL, type="source")
install.packages(pkgs='C:/Users/User/AppData/Local/Temp/RtmpCsBbeg/downloaded_packages/Rmpi_0.6-3.2.zip',
lib='C:/Program Files/R/R-3.0.3/library/Rmpi/', repos = NULL, type="source")
install.packages(pkgs='C:/Users/User/AppData/Local/Temp/RtmpCsBbeg/downloaded_packages/Rmpi_0.6-3.2.zip',
lib='C:/Program Files/R/R-3.0.3/library/Rmpi/', repos = NULL)
nrr <- qpNrr(gds680.eset, q=3, clusterSize = 4)
require("Rmpi")
library("Rmpi")
library("Rmpi")
library("Rmpi")
expFile = file("d:/Dropbox/Bioinformatics_Group/The_telomere_project/Thaliana_SOM_Arsen.xls")
# expFile = file("../Thaliana_SOM_filtered_log.txt")
# expFile = file("C:/Users/HP/Dropbox/Bioinformatics_Group/The_telomere_project/Thaliana_SOM_f.txt")
expMat = as.matrix(read.table(file = expFile,header=T, row.names=1))
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/R_workspace/AthalBiomart.R', echo=TRUE)
write.table(x=gene.dist.table, file="gene.dist.table_Arsen.xlsx", sep="\t")
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/R_workspace/gene.position.R', echo=TRUE)
write.table(x=gene.dist.table, file="gene.dist.table_Arsen.xlsx", sep="\t")
getwd()
write.table(x=gene.dist.table, file="gene.dist.table_Arsen.xls", sep="\t")
c(0.2,10,0.2)
seq(0.2, 10, 0.2)
fcovs = seq(0.2, 10, 0.2)
ch.length = 2492505
read.nums = fcovs*ch.length
read.nums[50]
fcovs = seq(0.2, 10, 0.2)
ch.length = 2492506
read.nums = fcovs*ch.length
read.nums[50]
fcovs = seq(0.2, 10, 1.2)
fcovs = seq(0.2, 11, 1.2)
fcovs = seq(0.2, 10, 1.1)
fcovs = seq(0.2, 10, 1)
fcovs = seq(0.2, 11, 1)
fcovs
fcovs = seq(0.2, 10, 0.8)
fcovs
fcovs = seq(0.2, 11, 1)
fcovs
fcovs = seq(0.2, 11, 1.1)
fcovs
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
setwd("D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/")
setwd(src)
setwd("src")
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
quals
quals="--phred33"
quals
quals != "--phred33"
quals = set.property(config.table, "quals", defaults$quals)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
#######################################################################################
######      Configuration options                                                 ######
#######################################################################################
###directories
scripts.dir="scripts"
bowtie.build.path="../windows/bowtie2-2.1.0-win/bowtie2-build.exe"
bowtie.align.path="../windows/bowtie2-2.1.0-win/bowtie2-align.exe"
samtools.path="../windows/samtools-win/samtools.exe"
picard.samtofastq.jar="../SamToFastq.jar"
###input_reads
fastq1="../examples/tel_reads1.fq"
fastq2="../examples/tel_reads2.fq"
fastq="../examples/tel_reads.fq"
single=F
read.length=rl=76
###algorithm_options
pattern='TTAGGG'
num.haploid.chr=23
min.seed=12
mode.local=F
###base_coverage_calculation_options
compute.base.cov=T
base.cov=5.4
base.index.pathtoprefix="../examples/base.index/base_index"
###output_options
output.dir="../examples/output"
###system_options
num.proc=3
###additional_options
quals="--phred33" #default: --phred33, alternatives: --phred64, --solexa-quals
################################################################
####     assemble options in config.table for validation    ####
################################################################
config.table = NULL
config.table['scripts.dir'] = scripts.dir
config.table['bowtie.build.path'] = bowtie.build.path
config.table['bowtie.align.path'] = bowtie.align.path
config.table['samtools.path'] = samtools.path
config.table['picard.samtofastq.jar'] = picard.samtofastq.jar
config.table['fastq1'] = fastq1
config.table['fastq2'] = fastq2
config.table['fastq'] = fastq
config.table['single'] = single
config.table['read.length'] = read.length
config.table['pattern'] = pattern
config.table['num.haploid.chr'] = num.haploid.chr
config.table['min.seed'] = min.seed
config.table['mode.local'] = mode.local
config.table['compute.base.cov'] = compute.base.cov
config.table['base.cov'] = base.cov
config.table['base.index.pathtoprefix'] = base.index.pathtoprefix
config.table['output.dir'] = output.dir
config.table['num.proc'] = num.proc
config.table['quals']=quals
config.table = as.matrix(config.table)
validate.R = file.path(scripts.dir, "validate.options.R")
if (!file.exists(validate.R))
validate.R = "validate.options.R"
if (!file.exists(validate.R)){
stop("validate.options.R not found.\n Provide scripts.dir containing the script.")
} else {
config.set = T
source(validate.R)
}
dir.create(output.dir, showWarnings=F)
OS.name = Sys.info()["sysname"]
if (!"seqinr" %in% installed.packages()) {
#   if (tolower(OS.name) != "windows") {
#     lib.paths = .libPaths()
#     user.dir.ind = which(regexpr("/home/", lib.paths, fixed=T)==1)
#     if(length(user.dir.ind) > 0 ) {
#       install.lib = lib.paths[ind]
#     } else {
#
#     }
#
#   }
install.packages("seqinr", repos = "http://cran.rstudio.com/")
}
if (!"psych" %in% installed.packages())
install.packages("psych", repos = "http://cran.rstudio.com/")
library("seqinr")
source(file.path(scripts.dir, "functions.R"))
# Formatting variables
#######################################################################################
#######################################################################################
tel.index.prefix = "tel_index"
tel.index.fasta = "tel_index.fasta"
tel.index.dir = file.path(output.dir, "index")
dir.create(tel.index.dir, showWarnings=F)
base.index.prefix="base_index"
tel.genome.fasta = "telomeric.genome.fasta"
align.dir = file.path(output.dir, "align")
dir.create(align.dir, showWarnings=F)
# Build telomeric index
#######################################################################################
#######################################################################################
cat("\nBuilding telomeric index in the directory", tel.index.dir, "\n")
success = build.tel.index(pattern, rl, min.seed=12, tel.index.dir, tel.index.prefix, bowtie.build.path)
if (!success){
stop("Problem building telomeric index")
} else {
# Align reads to telomeric index
#######################################################################################
#######################################################################################
align.args = list()
align.args$bowtie.align.path = bowtie.align.path
align.args$x = file.path(tel.index.dir, tel.index.prefix)
align.args$S = file.path(align.dir, "tel.align.sam")
l = floor(rl/3)
if (l < 6)
l = 6
if (l > 22)
l = 22
no.unal = ifelse(compute.base.cov,"", "--no-unal")
align.args$additional.options = paste("-p", num.proc,quals,
no.unal, "--n-ceil", rl-min.seed,
"-D 20 -R 3 -N 1 -L", l, "-i S,1,0.5")
align.args$mode = ifelse(mode.local, "--local", "--end-to-end")
if(single){
align.args$U = fastq
reads = as.character(paste('-U', align.args$U))
} else {
align.args$m1 = fastq1
align.args$m2 = fastq2
reads = as.character(paste('-1', align.args$m1,'-2', align.args$m2))
}
}
success = do.call(bowtie.align, args=align.args)
command
cal.out = call.cmd(command)
cal.out
command = "D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/windows/bowtie2-2.1.0-win/bowtie2-align.exe -q --end-to-end --quiet -p 3 --phred64  --n-ceil 64 -D 20 -R 3 -N 1 -L 22 -i S,1,0.5 -x ../examples/output/index/tel_index -1 ../examples/tel_reads1.fq -2 ../examples/tel_reads2.fq -S ../examples/output/align/tel.align.sam"
cal.out = call.cmd(command)
cal.out
!suppress.err
supress.err = F
!suppress.err
!supress.err
success = (call.out == 0)
call.out = 0
success = (call.out == 0)
success
call.out = 1
success = (call.out == 0)
success
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
source('D:/Dropbox/Bioinformatics_Group/The_telomere_project/computel_final/src/scripts/computel.R', echo=TRUE)
